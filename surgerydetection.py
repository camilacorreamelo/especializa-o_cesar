# -*- coding: utf-8 -*-
"""surgeryDetection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Xbpy-M_SdJTIK0unaalTTI-qvDeae-ls
"""

# Commented out IPython magic to ensure Python compatibility.
#clone YOLOv5 and 
!git clone https://github.com/ultralytics/yolov5  # clone repo
# %cd yolov5
# %pip install -qr requirements.txt # install dependencies
# %pip install -q roboflow

import torch
import os
from IPython.display import Image, clear_output  # to display images

print(f"Setup complete. Using torch {torch.__version__} ({torch.cuda.get_device_properties(0).name if torch.cuda.is_available() else 'CPU'})")

!pip install joblib

!pip install roboflow

from roboflow import Roboflow
rf = Roboflow(api_key="zsS4WZCSWohSPiC6vVNo")
project = rf.workspace("especializao").project("surgeryinstruments")
dataset = project.version(3).download("yolov5")

# Commented out IPython magic to ensure Python compatibility.
# Weights & Biases  (optional)
# %pip install -q wandb
import wandb

import sys

def wandb_colab_login():
  """Temporary hack to prevent colab from hanging"""
  sys.modules["google.colab2"] = sys.modules["google.colab"]
  del sys.modules["google.colab"]
  wandb.login(relogin = True)
  sys.modules["google.colab"] = sys.modules["google.colab2"]
wandb_colab_login()

from google.colab import drive

drive.mount('/content/gdrive/')

!python train.py --img 640 --batch 45 --epochs 500 --data {dataset.location}/data.yaml --weights yolov5s.pt --cache

# Commented out IPython magic to ensure Python compatibility.
# %cp -r /content/yolov5/runs/train /content/gdrive/MyDrive/surgerydetection/

# Commented out IPython magic to ensure Python compatibility.
# Start tensorboard
# Launch after you have started training
# logs save in the folder "runs"
# %load_ext tensorboard
# %tensorboard --logdir runs

#export your model's weights for future use
from google.colab import files
files.download('./runs/train/exp/weights/best.pt')